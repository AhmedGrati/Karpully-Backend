# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Email {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  sentDate: DateTime!
  emailType: EmailTypeEnum!
  sender: User!
  token: String!
  verificationToken: String!
  isExpired: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EmailTypeEnum {
  CONFIRMATION
  RESET_PASSWORD
}

type Gov {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  govName: String!
  cities: [City!]!
}

type City {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int!
  cityName: String!
  gov: Gov!
  carpools: [Carpool!]!
}

type Submission {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Float!
  status: String!
  owner: User!
  carpool: Carpool!
}

type Carpool {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Float!
  departureDate: DateTime!
  nbrOfAvailablePlaces: Float!
  description: String!
  hasSmokePermission: Boolean!
  departureCity: City!
  destinationCity: City!
  owner: User!
  submissions: Submission!
}

type Notification {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Float!
  receiver: User!
  content: String!
}

type Connection {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Float!
  historic: ConnectionHistoric!
}

type ConnectionHistoric {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Float!
  connections: [Connection!]!
  owner: User!
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  username: String!
  firstname: String
  lastname: String
  completedSignUp: Boolean!
  age: Float
  rate: Float
  email: String!
  localization: String
  telNumber: String
  authorities: [String!]
  roles: [UserRoleEnum!]!
  gender: Gender!
  lowerCasedUsername: String!
  isConfirmed: Boolean!
  sentEmails: [Email!]
  carpools: [Carpool!]
  submissions: [Submission!]
  notifications: [Notification!]
  historic: ConnectionHistoric
}

enum UserRoleEnum {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

type TokenModel {
  access_token: String!
  refresh_token: String!
  user: User!
}

type Meta {
  itemCount: Float!
  currentPage: Float!
}

type PaginatedCarpool {
  items: [Carpool!]!
  meta: Meta!
}

type PaginatedNotification {
  items: [Notification!]!
  meta: Meta!
}

type Address {
  ID: Float!
  house_number: Float
  road: String
  neighbourhood: String
  hamlet: String
  suburb: String
  village: String
  town: String
  city_district: String
  city: String
  region: String
  county: String
  state_district: String
  state: String
  state_code: String
  postcode: String
  country: String
  country_code: String
  name: String
}

type Location {
  place_id: Int!
  licence: String!
  osm_type: String!
  osm_id: String!
  boundingbox: [String!]!
  lat: String!
  lon: String!
  display_name: String!
  class: String!
  type: String!
  importance: Float!
  icon: String!
  address: Address!
}

type Waypoint {
  hint: String
  distance: Float
  name: String
  location: [Float!]
}

type Leg {
  distance: Float
  duration: Float
  summary: String
  weight: Float
}

type Route {
  geometry: String
  distance: Float
  duration: Float
  weight_name: String
  weight: Float
  legs: [Leg!]
}

type Query {
  users: [User!]!
  user(id: Float!): User!
  existByEmail(email: String!): Boolean!
  existByUsername(username: String!): Boolean!
  email: [Email!]!
  emails(id: Int!): Email!
  refreshToken(refreshToken: String!): TokenModel!
  connectionHistoric(userId: Float!): ConnectionHistoric!
  carpool(id: Int!): Carpool!
  carpools(where: Where!, paginationInput: PaginationInput!): PaginatedCarpool!
  cities: [City!]!
  city(id: Int!): City!
  citiesByGov(govId: Int!): [City!]!
  govs: [Gov!]!
  gov(id: Int!): Gov!
  submissions: [Submission!]!
  submission(id: Int!): Submission!
  notification(id: Int!): Notification!
  notifications(paginationInput: PaginationInput!, userId: Float!): PaginatedNotification!
  geoEncoding(loc: FindLocationByTextInput!): [Location!]!
  geoDecoding(xy: ReverseLocationSearchInput!): [Location!]!
  autocomplete(textInput: AutocompleteInput!): [Location!]!
}

input Where {
  departureDate: DateTime
  nbrOfAvailablePlaces: Float
  description: String
  hasSmokePermission: Boolean
  id: Int
}

input PaginationInput {
  page: Float!
  limit: Float!
  orderBy: OrderBy
}

enum OrderBy {
  ASC
  DESC
}

input FindLocationByTextInput {
  text: String!
}

input ReverseLocationSearchInput {
  lat: Float!
  lon: Float!
}

input AutocompleteInput {
  place: String!
  limit: Float = 10
}

type Mutation {
  firstStageSignUp(firstStageDTOInput: FirstStageDTOInput!): User!
  secondStageSignUp(secondStageDTOInput: SecondStageDTOInput!): User!
  update(updateUserInput: UpdateUserInput!): User!
  remove(id: Float!): User!
  confirmEmail(emailVerificationInput: EmailVerificationInput!): TokenModel!
  sendResetPasswordEmail(ResetPasswordEmailInput: ResetPasswordEmailInput!): Boolean!
  resetPassword(ResetPasswordInput: ResetPasswordInput!): Boolean!
  login(credentialsInput: CredentialsInput!): TokenModel!
  createCarpool(createCarpoolInput: CreateCarpoolInput!): Carpool!
  updateCarpool(updateCarpoolInput: UpdateCarpoolInput!): Carpool!
  removeCarpool(id: Int!): Carpool!
  restoreCarpool(id: Int!): Carpool!
  createCity(createCityInput: CreateCityInput!): City!
  updateCity(updateCityInput: UpdateCityInput!): City!
  removeCity(id: Int!): City!
  createGov(createGovInput: CreateGovInput!): Gov!
  updateGov(updateGovInput: UpdateGovInput!): Gov!
  removeGov(id: Int!): Gov!
  createSubmission(createSubmissionInput: CreateSubmissionInput!): Submission!
  rejectSubmission(updateSubmissionInput: UpdateSubmissionInput!): Submission!
  acceptSubmission(updateSubmissionInput: UpdateSubmissionInput!): Submission!
  removeSubmission(id: Int!): Submission!
}

input FirstStageDTOInput {
  username: String!
  email: String!
  password: String!
}

input SecondStageDTOInput {
  id: Float!
  localization: String!
  telNumber: String!
  firstname: String!
  lastname: String!
  age: Float!
  gender: Float!
}

input UpdateUserInput {
  id: Int
  username: String
  firstname: String
  lastname: String
  age: Float
  rate: Float
  email: String
  localization: String
  telNumber: String
  password: String
  roles: [String!]
  gender: Float
}

input EmailVerificationInput {
  token: String!
  verificationToken: String!
  userId: Float!
}

input ResetPasswordEmailInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  verificationToken: String!
  email: String!
  password: String!
}

input CredentialsInput {
  username: String!
  password: String!
}

input CreateCarpoolInput {
  departureDate: DateTime!
  nbrOfAvailablePlaces: Float!
  description: String!
  hasSmokePermission: Boolean!
  departureCityId: Float!
  destinationCityId: Float!
}

input UpdateCarpoolInput {
  departureDate: DateTime
  nbrOfAvailablePlaces: Float
  description: String
  hasSmokePermission: Boolean
  departureCityId: Float
  destinationCityId: Float
  id: Int!
}

input CreateCityInput {
  cityName: String!
  govId: Float!
}

input UpdateCityInput {
  cityName: String
  govId: Float
  id: Int!
}

input CreateGovInput {
  govName: String!
}

input UpdateGovInput {
  govName: String
  id: Int!
}

input CreateSubmissionInput {
  carpoolId: Float!
}

input UpdateSubmissionInput {
  carpoolId: Float
  id: Int!
}

type Subscription {
  notification(userId: Float!): Notification!
}
